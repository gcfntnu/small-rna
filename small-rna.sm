#-*- mode: snakemake -*-
"""
This is a part of the pipeline utilities at Genomics Core Facility (GCF),  Trondheim

small-rna
===================================
small-rna Analysis Pipeline.

Documentation: https://github.com/small-rna
Authors:
Arnar Flatberg / flatberg <arnar.flatberg@gmail.com>
"""

from os.path import join, abspath, dirname
from os import makedirs, environ
import sys
import collections
import yaml

from snakemake.workflow import srcdir
from snakemake.logging import logger
from snakemake.utils import update_config, min_version

min_version("5.1.2")

def update_config2(config, extra_config):
    """Recursively update dictionary config with overwrite_config.

    From Snakemake codebase (update_config), this does not overwrite if key exist

    See
    http://stackoverflow.com/questions/3232943/update-value-of-a-nested-dictionary-of-varying-depth
    for details.

    Args:
      config (dict): dictionary to update
      overwrite_config (dict): dictionary whose items will overwrite those in config

    """
    
    def _update(d, u):
        for (key, value) in u.items():
            if (isinstance(value, collections.Mapping)):
                d[key] = _update(d.get(key, {}), value)
            else:
                if not key in d:
                    d[key] = value
        return d
    return _update(config, extra_config)

TMPDIR = os.environ.get('TMPDIR', '/tmp')
# environment variables can override config file
INTERIM_DIR = environ.get('GCF-INTERIM') or config.get('interim_dir', 'data/tmp/')
makedirs(INTERIM_DIR, exist_ok=True)
EXT_DIR = environ.get('GCF-EXT') or config.get('ext_dir', 'data/ext')
makedirs(EXT_DIR, exist_ok=True)
FASTQ_DIR =  environ.get('GCF-FASTQ') or config.get('fastq_dir','data/raw/fastq')
makedirs(FASTQ_DIR, exist_ok=True)
PROCESSED_DIR =  environ.get('GCF-PROCESSED') or config.get('processed_dir', 'data/processed')
makedirs(PROCESSED_DIR, exist_ok=True)

extra_conf_fn = srcdir('small-rna.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        # original config will override extra config on shared items
        update_config2(config, c)
        
# library preparation kit specific configuration
libprep_fn = srcdir('libprep.config')
with open(libprep_fn) as fh:
    LIBPREP_CONF  = yaml.load(fh) or {}
kit = config.get('libprepkit', 'default')
LIBPREP = LIBPREP_CONF[kit]
if kit.startswith('Lexogen'):
    # we cut start/end random seqs on lexogen kits
    read_geometry = config.get('read_geometry')
    if read_geometry:
        read_geometry = [int(i) for i in read_geometry]
        read_geometry[0] -= 11
        if len(read_geometry) > 1:
            read_geometry[0] -= 8
        config['read_geometry'] = read_geometry

# load function for statistical models
def load_model(model_yaml_file):
    with open(model_yaml_file) as fh:
        MODELS  = yaml.load(fh) or {}
        config['models'] = MODELS
        config['model_names'] = list(MODELS.keys())
        
if not 'SAMPLES' in locals():
    SAMPLES = list(config.get('samples', {}).keys())

    

include:
    'rules/filter.rules'
include:
    'rules/quant.rules'

onsuccess:
    # write config
    from datetime import datetime
    import copy
    import yaml
    
    dt = datetime.now()
    final_conf_fn = 'small-rna_{}_{}_{}.success.config'.format(dt.year, dt.month, dt.day)
    if os.path.exists(final_conf_fn):
        base_fn = copy.copy(final_conf_fn)
        for i in range(999):
            final_conf_fn = 'small-rna_{}_{}_{}_#{}.success.config'.format(dt.year, dt.month, dt.day, i)
            if not os.path.exists(final_conf_fn):
                break
    if os.path.exists(final_conf_fn):
        raise ValueError('this is just too many runs on the same day')
    
    #config_path = dirname(srcdir('small-rna.config'))
    #final_conf_fn = join(config_path,  final_conf_fn)
    
    with open(final_conf_fn, 'w') as fh:
        yaml.dump(config, fh, default_flow_style=False)
