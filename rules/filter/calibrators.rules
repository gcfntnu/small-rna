#-*-mode:snakemake-*-

from snakemake.workflow import srcdir

CALIBRATORS_EXTEND = config.get('calibrators_extend', False)
    
rule calibrators_fasta:
    output:
        'data/ext/smallrna/calibrators/calibrators.fa'
    shell:
        """
        echo ">Cal01" >> {output}
        echo GUCCCACUCCGUAGAUCUGUUC >> {output}
        echo ">Cal02" >> {output}
        echo GAUGUAACGAGUUGGAAUGCAA >> {output}
        echo ">Cal03" >> {output}
        echo UAGCAUAUCGAGCCUGAGAACA >> {output}
        echo ">Cal04" >> {output}
        echo CAUCGGUCGAACUUAUGUGAAA >> {output}
        echo ">Cal05" >> {output}
        echo GAAGCACAUUCGCACAUCAUAU >> {output}
        echo ">Cal06" >> {output}
        echo UCUUAACCCGGACCAGAAACUA >> {output}
        echo ">Cal07" >> {output}
        echo AGGUUCCGGAUAAGUAAGAGCC >> {output}
        echo ">Cal08" >> {output}
        echo UAACUCCUUAAGCGAAUCUCGC >> {output}
        echo ">Cal09" >> {output}
        echo AAAGUAGCAUCCGAAAUACGGA >> {output}
        echo ">Cal10" >> {output}
        echo UGAUACGGAUGUUAUACGCAGC >> {output}
        """

rule calibrators_to_dna:
    input:
        rules.calibrators_fasta.output
    output:
        'data/ext/smallrna/calibrators/calibrators.dna.fa'
    message:
        'Converting RNA alphabet to DNA for calibrators'
    shell:
        """
        cat {input} | sed 's/U/T/g'> {output}
        """


rule calibrators_extend:
    input:
        rules.calibrators_to_dna.output
    output:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa'
    params:
        script = srcdir('scripts/extend_calibrators.py')
    shell:
        'python {params.script} {input} {output}'


rule calibrators_bowtie_build_index:
    input:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa' if CALIBRATORS_EXTEND else 'data/ext/smallrna/calibrators/calibrators.dna.fa'
    output:
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.1.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.2.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.3.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.4.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.rev.1.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.rev.2.ebwt'
    params:
        index = 'data/ext/smallrna/calibrators/index/bowtie/calibrators'
    conda:
        'envs/calibrators.yaml'
    shell:
        'bowtie-build {input} {params.index}'

rule calibrators_bowtie2_build_index:
    input:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa' if CALIBRATORS_EXTEND else 'data/ext/smallrna/calibrators/calibrators.dna.fa'
    output:
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.1.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.2.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.3.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.4.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.rev.1.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.rev.2.bt2'
    params:
        index = 'data/ext/smallrna/calibrators/index/bowtie2/calibrators'
    conda:
        'envs/calibrators.yaml'
    shell:
        'bowtie2-build {input} {params.index}'

rule calibrators_filter_bowtie:
    input:
        fastq = _filter_get_trimmed,
        index = rules.calibrators_bowtie_build_index.output
    output:
        fastq = 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/bowtie/{sample}.clean.fastq',
        counts = 'data/processed/calibrators/{sample}.bowtie.counts'
    conda:
        'envs/calibrators.yaml'
    benchmark:
        'timings/{sample}/calibrators.bowtie'
    params:
        args = '-n 0 -k 1 -l 18 -q --best --norc -S ',
        index = rules.calibrators_bowtie_build_index.params.index
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.calibrators.bowtie.log',
        error = 'logs/{sample}/filter.error'
    shell:
        'bowtie {params.index} '
        '{input.fastq} '
        '--un {output.fastq} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -q 5 -S  - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '
        
rule calibrators_filter_bowtie2:
    input:
        fastq = _filter_get_trimmed,
        index = rules.calibrators_bowtie2_build_index.output
    output:
        fastq = 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/bowtie2/{sample}.clean.fastq',
        counts = 'data/processed/calibrators/{sample}.bowtie2.counts'
    conda:
        'envs/calibrators.yaml'
    params:
        args = '-D 15 -R 2 -N 0 -L 18 -i S,1,0 --norc',
        index = rules.calibrators_bowtie2_build_index.params.index
    threads:
        2
    benchmark:
        'timings/{sample}/calibrators.bowtie2'
    log:
        bowtie = 'logs/{sample}/filter.calibrators.bowtie2.log',
        error = 'logs/{sample}/filter.error'
    shell:
        'bowtie2 '
        '-U {input.fastq} '
        '--un {output.fastq} '
        '-x {params.index} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '

rule calibrators_bbmap_build_index:
    input:
         'data/ext/smallrna/calibrators/calibrators.dna.extended.fa' if CALIBRATORS_EXTEND else 'data/ext/smallrna/calibrators/calibrators.dna.fa'
    output:
        'data/ext/smallrna/calibrators/index/bbmap/ref/genome/1/info.txt'
    params:
        index = 'data/ext/smallrna/calibrators/index/bbmap'
    conda:
        'envs/calibrators.yaml'
    shell:
        'bbmap.sh ref={input} path={params.index}'

rule calibrators_filter_bbmap:
    input:
        fastq = _filter_get_trimmed,
        index = rules.calibrators_bbmap_build_index.output
    output:
        fastq = 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/bbmap/{sample}.clean.fastq',
        counts = 'data/processed/calibrators/{sample}.bbmap.counts'
    conda:
        'envs/calibrators.yaml'
    shell:
        'bbduk.sh in={input.fastq} outm={output.fastq} stats={output.counts} ref={input.index}'

def _filter_get_calibrator_clean(wildcards):
    cal = config.get('calibrators', True)
    if cal:
        return 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/bowtie/{sample}.clean.fastq'.format(wildcards.sample)
    else:
        return _filter_get_trimmed(wildcards)
