
def bfq_counts(wildcards):
    if config['quant']['method'] == 'quickmirseq':
        return rules.quickmirseq_quant.output

rule bfq_pca:
    input:
        join(QUANT_INTERIM, 'unitas', 'adata.h5ad')
    output:
        join(BFQ_INTERIM, 'pca_mqc.png')
    params:
        script = srcdir('scripts/plotpca2.py')
    singularity:
        'docker://' + config['docker']['scanpy']    
    shell:
        'python {params.script} '
        '--recipe smallrna '
        '--input {input} '
        '--output {output} '

rule bfq_gene_biotypes:
    input:
        join(QUANT_INTERIM, 'unitas', 'annotations.tsv"')
    params:
        script = srcdir('scripts/plot_biotype.py')
    singularity:
        'docker://' + config['docker']['scanpy']   
    output:
        join(BFQ_INTERIM, 'figs', 'gene_biotypes_mqc.yaml'),
    shell:
        'python {params.script} '
        '{input.exprs} '
        '--sample-info {input.sample_info} '
        '--output {output} '
        '--feature-info {input.feature_info} '

rule bfq_mirna_high:
    input:
        exprs = join(QUANT_INTERIM, 'unitas', 'adata.h5ad')
    params:
        script = srcdir('scripts/plot_highly_expressed.py')
    singularity:
        'docker://' + config['docker']['bfq_plot']
    output:
        join(BFQ_INTERIM, 'figs', 'gene_high_mqc.yaml')
    shell:
        'python {params.script} '
        '{input.exprs} '
        '--sample-info {input.sample_info} '
        '--output {output} '
        '--feature-info {input.feature_info} '

rule bfq_exprs:

rule bfq_aligned:


