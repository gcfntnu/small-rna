#-*-mode:snakemake-*-

from snakemake.workflow import srcdir

CALIBRATORS_EXTEND = config.get('calibrators_extend', False)
    
rule calibrators_fasta:
    output:
        'data/ext/smallrna/calibrators/calibrators.fa'
    shell:
        """
        echo ">Cal01" >> {output}
        echo GUCCCACUCCGUAGAUCUGUUC >> {output}
        echo ">Cal02" >> {output}
        echo GAUGUAACGAGUUGGAAUGCAA >> {output}
        echo ">Cal03" >> {output}
        echo UAGCAUAUCGAGCCUGAGAACA >> {output}
        echo ">Cal04" >> {output}
        echo CAUCGGUCGAACUUAUGUGAAA >> {output}
        echo ">Cal05" >> {output}
        echo GAAGCACAUUCGCACAUCAUAU >> {output}
        echo ">Cal06" >> {output}
        echo UCUUAACCCGGACCAGAAACUA >> {output}
        echo ">Cal07" >> {output}
        echo AGGUUCCGGAUAAGUAAGAGCC >> {output}
        echo ">Cal08" >> {output}
        echo UAACUCCUUAAGCGAAUCUCGC >> {output}
        echo ">Cal09" >> {output}
        echo AAAGUAGCAUCCGAAAUACGGA >> {output}
        echo ">Cal10" >> {output}
        echo UGAUACGGAUGUUAUACGCAGC >> {output}
        """

rule calibrators_to_dna:
    input:
        rules.calibrators_fasta.output
    output:
        'data/ext/smallrna/calibrators/calibrators.dna.fa'
    message:
        'Converting RNA alphabet to DNA for calibrators'
    shell:
        """
        cat {input} | sed 's/U/T/g'> {output}
        """


rule calibrators_extend:
    input:
        rules.calibrators_to_dna.output
    output:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa'
    params:
        script = srcdir('scripts/extend_calibrators.py')
    shell:
        'python {params.script} {input} {output}'


rule calibrators_bowtie_build_index:
    input:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa' if CALIBRATORS_EXTEND else 'data/ext/smallrna/calibrators/calibrators.dna.fa'
    output:
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.1.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.2.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.3.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.4.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.rev.1.ebwt',
        'data/ext/smallrna/calibrators/index/bowtie/calibrators.rev.2.ebwt'
    params:
        index = 'data/ext/smallrna/calibrators/index/bowtie/calibrators'
    conda:
        'envs/calibrators.yaml'
    shell:
        'bowtie-build {input} {params.index}'

rule calibrators_bowtie2_build_index:
    input:
        'data/ext/smallrna/calibrators/calibrators.dna.extended.fa' if CALIBRATORS_EXTEND else 'data/ext/smallrna/calibrators/calibrators.dna.fa'
    output:
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.1.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.2.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.3.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.4.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.rev.1.bt2',
        'data/ext/smallrna/calibrators/index/bowtie2/calibrators.rev.2.bt2'
    params:
        index = 'data/ext/smallrna/calibrators/index/bowtie2/calibrators'
    conda:
        'envs/filter.yaml'
    shell:
        'bowtie2-build {input} {params.index}'

rule calibrators_filter_bowtie:
    input:
        fastq = _filter_get_trimmed,
        index =  rules.calibrators_bowtie_build_index.output
    output:
        fastq = 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrator_clean/{sample}.fastq.gz',
        counts = 'data/processeds/{sample}.calibrators.counts'
    conda:
        'envs/filter.yaml'
    params:
        args = '-D 15 -R 2 -N 1 -L 19 -i S,1,0'
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.spikein.bowtie2.log',
        samtools = 'logs/{sample}/filter.spikein.samtools.log',
        error = 'logs/{sample}/filter.error'
    shell:
        """
        bowtie2 -p {threads} {params.args} --un-gz {output.fastq} -x {params.calibrator_index} -U {input.fastq} 2>> {log.bowtie} | awk '$$2 != 4 {print $$0}' | samtools view -Sb - 2>> {log.samtools} | tee {output.bam} | samtools view - 2>> {log.samtools} | awk '{print $$3}' | sort -k 2 2>> {log.error} | uniq --count > {output.counts} 2>> {log.error}
        """

rule calibrators_filter_bowtie2:
    input:
        fastq = _filter_get_trimmed,
        ref = 'data/tmp/GCF-2018-547-tmp/smallrna/spikein/calibrators.fna'
    output:
        fastq = 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/{sample}.clean.fastq.gz',
        counts = 'data/processed/{sample}.calibrators.counts'
    conda:
        'envs/filter.yaml'
    params:
        args = '-D 15 -R 2 -N 1 -L 19 -i S,1,0'
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.spikein.bowtie2.log',
        samtools = 'logs/{sample}/filter.spikein.samtools.log',
        error = 'logs/{sample}/filter.error'
    shell:
        """
        bowtie2 -p {threads} {params.args} --un-gz {output.fastq} -x {params.calibrator_index} -U {input.fastq} 2>> {log.bowtie} | awk '$$2 != 4 {print $$0}' | samtools view -Sb - 2>> {log.samtools} | tee {output.bam} | samtools view - 2>> {log.samtools} | awk '{print $$3}' | sort -k 2 2>> {log.error} | uniq --count > {output.counts} 2>> {log.error}
        """

def _filter_get_calibrator_clean(wildcards):
    cal = config.get('calibrators', True)
    if cal:
        return 'data/tmp/GCF-2018-547-tmp/smallrna/filtered/calibrators/{sample}.clean.fastq.gz'.format(wildcards.sample)
    else:
        return _filter_get_trimmed(wildcards)
