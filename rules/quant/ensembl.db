#-*- mode:snakemake -*-
from os.path import join
import string

## config
##################################
EXTDIR = join(config.get('ext_dir', 'data/ext'), 'ensembl')
ORG = config.get('organism', 'homo_sapiens')
ASSEMBLY = config.get('assembly', 'primary_assembly')
ENS_RELEASE = config.get('ensembl_release', '92')
ENS_VER = config.get('ensembl_version', 'GRCh38')
if ORG == 'homo_sapiens':
    ENS_NAME = '' if ENS_VER == 'GRCh38' else '/grch37'
else:
    ENS_NAME = ''
TRANSCRIPTOME_TYPE = config.get('transcriptome_type') #['prebuilt', 'all', 'chr', 'pri']
MASK_TRANSCRIPTOME = bool(config.get('mask_transcriptome', 1))
PROTOCOL = 'ftp'
##################################


## ENSEMBL URLS ##
if ASSEMBLY == 'primary_assembly' or ASSEMBLY == 'primary':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/dna/{}.{}.dna.primary_assembly.fa.gz'
    GENOME = GENOME.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
elif ASSEMBLY == 'all':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/dna/{}.{}.dna.toplevel.fa.gz'
    GENOME = GENOME.format(ROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr_patch_hapl_scaff.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
elif ASSEMBLY == 'chr':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr.gtf.gz'
    GENOME = GENOME.format(ROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
else:
    raise ValueError('ASSEMBLY option needs to be one of : primary, all, chr')

ENS_TRANSCRIPTOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/cdna/{}.{}.cdna.all.fa.gz'
ENS_TRANSCRIPTOME = ENS_TRANSCRIPTOME.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
ENS_NONCODING = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/ncrna/{}.{}.ncrna.fa.gz'
ENS_NONCODING = ENS_NONCODING.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)

rule emsembl_dna_reference:
    output:
        join(EXTDIR, GENOME.split('/')[-1].split('.gz')[0])
    params: 
        url = GENOME
    threads: 
        32
    log:
        'logs/ensembl.genome.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule emsembl_cdna_reference:
    params: 
        url = ENS_TRANSCRIPTOME
    output:
        join(EXTDIR, ENS_TRANSCRIPTOME.split('/')[-1].split('.gz')[0])
    threads: 
        32
    log:
        'logs/ensembl.cdna.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule emsembl_noncoding_reference:
    params:
        url = ENS_NONCODING
    output:
        join(EXTDIR, ENS_NONCODING.split('/')[-1].split('.gz')[0])
    threads:
        32
    log:
        'logs/ensembl.noncoding.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'
        
rule ensembl_gtf:
    params: 
        url = GTF
    output: 
        join(EXTDIR, GTF.split('/')[-1].split('.gz')[0])    
    threads:
        32
    log:
        'logs/ensembl.gtf.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'
