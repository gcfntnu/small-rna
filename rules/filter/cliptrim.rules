#-*- mode:snakemake -*-
from os.path import join

ADAPTER = config.get('adapter') or LIBPREP.get('single_end', {}).get('adapter') or LIBPREP.get('adapter')

rule filter_adapter_atropos:
    input:
        fastq = _filter_get_raw
    output:
        trimmed = temp(join(FILTER_INTERIM, '{sample}', '{sample}.trimmed.atropos.fastq')),
        untrimmed = temp(join(FILTER_INTERIM, '{sample}', '{sample}.untrimmed.atropos.fastq'))
    params:
        args = '--mirna'
    singularity:
        'docker://' + config['docker']['atropos']
    threads:
        4
    log:
        'logs/{sample}/atropos.log'
    shell:
        'atropos trim '
        '-se {input.fastq} '
        '--untrimmed-output {output.untrimmed} '
        '-o {output.trimmed} '
        '-T {threads} '
        '{params.args} '
        ' > {log} '
        '&& test -f {output.untrimmed} || touch {output.untrimmed}'

rule filter_umidedup:
    input:
        fastq = rules.filter_adapter_atropos.output.trimmed
    output:
        temp(join(FILTER_INTERIM, '{sample}', '{sample}.dup.fastq'))
    singularity:
        'docker://' + config['docker']['fastx_toolkit']
    shell:
        'fastx_collapser -i {input} -o {output}'
    
rule filter_bioscientific_trimmed:
    input:
        fastq = rules.filter_umidedup.output if config['filter'].get('dedup', False) else rules.filter_adapter_atropos.output.trimmed
    output:
        fastq = temp(join(FILTER_INTERIM, '{sample}', '{sample}.trimmed.bioscientific.1.fastq'))
    params:
        '-f 4 -t 4 -A -G --low_complexity_filter'
    threads:
        4
    singularity:
        'docker://' + config['docker']['fastp']
    log:
        html = 'logs/{sample}/fastp.trimmed.html',
        json = 'logs/{sample}/fastp.trimmed.json'
    shell:
        'fastp '
        '-i {input.fastq} '
        '-o {output.fastq} '
        '{params} ' 
        '--json {log.json} '
        '--html {log.html} '

rule filter_bioscientific_untrimmed:
    input:
        fastq = rules.filter_adapter_atropos.output.untrimmed
    output:
        fastq = temp(join(FILTER_INTERIM, '{sample}', '{sample}.trimmed.bioscientific.2.fastq'))
    params:
        '-f 4 -A -G --low_complexity_filter'
    threads:
        4
    singularity:
        'docker://' + config['docker']['fastp']
    log:
        html = 'logs/{sample}/fastp.untrimmed.html',
        json = 'logs/{sample}/fastp.untrimmed.json'
    shell:
        'fastp '
        '-i {input.fastq} '
        '-o {output.fastq} '
        '{params} ' 
        '--json {log.json} '
        '--html {log.html} '

rule filter_bioscientific:
    input:
        rules.filter_bioscientific_trimmed.output.fastq,
        rules.filter_bioscientific_untrimmed.output.fastq
    output:
        join(FILTER_INTERIM, '{sample}', '{sample}.trimmed.bioscientific.fastq')
    shell:
        'cat {input} > {output}'

rule filter_truseq:
    input:
        rules.filter_adapter_atropos.output
    output:
        join(FILTER_INTERIM, '{sample}', '{sample}.trimmed.truseq.fastq')
    params:
        '-A -G --low_complexity_filter'
    threads:
        4
    singularity:
        'docker://' + config['docker']['fastp']
    log:
        html = 'logs/{sample}/fastp.truseq.html',
        json = 'logs/{sample}/fastp.json'
    shell:
        'cat {input} | fastp --stdin '
        '-o {output} '
        '{params} ' 
        '--json {log.json} '
        '--html {log.html} '

rule filter_mirtrace_config:
    output:
        '.filter_mirtrace.conf'
    params:
        adapter = LIBPREP['adapter']
    run:
        with open(output[0], 'w') as fh:
            for k, v in config['samples'].items():
                fn = join(config['fastq_dir'], v['R1'])
                els = [fn, k, params.adapter]
                fh.write(','.join(els) + '\n')
        
rule filter_mirtrace:
    input:
        config = '.filter_mirtrace.conf'
    params:
        outdir = join(FILTER_INTERIM, 'mirtrace'),
        protocol = LIBPREP['mirtrace']['protocol'],
        species = 'hsa',
        title = config.get('project_id', 'GCF-0000-00')
    singularity:
        'docker://' + config['docker']['mirtrace']
    threads:
        4
    output:
        join(FILTER_INTERIM, 'mirtrace', 'trimmed.mirtrace.fastq')
    shell:
        'mirtrace qc '
        '-s {params.species} '
        '-c {input.config} '
        '-o {params.outdir} '
        '-p {params.protocol} '
        '--title {params.title} '
        '-t {threads} '
        '-f -w '

def _filter_get_trimmed(wildcards):
    if not config['filter'].get('filter_trim', True):
        return _filter_get_raw(wildcards)
    if 'kit' in wildcards and wildcards.kit is not None:
        kit = wildcards.kit
    else:
        kit = config.get('libprepkit')
        
    if kit not in ['TruSeq Small RNA Library Prep Kit', 'Bioo Scientific NEXTflex Small RNA-Seq Kit v3']:
        raise ValueError('Kit argument: {} not supported'.format(kit))
    return join(FILTER_INTERIM, wildcards.sample, '{}.trimmed.{}.fastq'.format(wildcards.sample, kit))
