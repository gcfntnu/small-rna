#-*- mode:snakemake -*-
from os.path import join

include:
    'sortmerna.rules'

rule rrna_filter_bbduk:
    input:
        fastq = _filter_get_contaminants_clean,
        ref = join(EXT_DIR, 'rrna', 'ribokmers.fa.gz') # fixme: needs download routine
    output:
        fastq = join(FILTER_INTERIM, '{sample}', '{sample}.rrna.bbduk.clean.fastq'),
        counts = join(FILTER_INTERIM, '{sample}', '{sample}.rrna.bbmap.counts')
    conda:
        'envs/filter.yaml'
    log:
        'logs/{sample}/filter.rrna.bbduk.log'
    threads:
        8
    shell:
        'bbduk.sh t={threads} overwrite=true in={input.fastq} k=29 rcomp=f outu={output.fastq} stats={output.counts} ref={input.ref} 2> {log}'

    
def _filter_clean_fastq(wildcards):
    rib = config['filter'].get('filter_ribosomal', True)
    ribo_quant = config['filter'].get('ribosomal_quantifier', 'bbduk')
    if rib:
        if ribo_quant in ['bbduk', 'sortmerna']:
            return join(FILTER_INTERIM, '{0}', '{0}.rrna.{1}.clean.fastq').format(wildcards.sample, ribo_quant)
        elif ribo_quant == 'unitas':
            assert(config['filter'].get('quant') == 'unitas')
            return _filter_get_trimmed(wildcards)
        else:
            raise ValueError('ribosomal quantifier option not valid: {}'.format(ribo_quant))
    else:
        return _filter_get_contaminants_clean(wildcards)
