#-*- mode:snakemake -*-
import shutil
from os.path import join, abspath

include:
    'mirge.db'


MIRGE_ORG = {'homo_sapiens': 'human',
           'human': 'human',
           'human': 'human',
           'mus_musculus': 'mouse',
           'mouse': 'mouse',
           'mouse': 'mouse',
           'rattus_norvegicus': 'rat',
           'rat': 'rat',
           'rat': 'rat'}

rule mirge_symlink:
    input:
        get_filtered_fastq
    params:
        join(QUANT_INTERIM, 'mirge', 'fastq')
    output:
        join(QUANT_INTERIM, 'mirge', 'fastq', '{sample}.fastq')
    run:
        import os
        src = abspath(input[0])
        dst = abspath(output[0])
        os.symlink(src, dst)
        print('symlinking: {} > {}'.format(src, dst))

rule mirge_annotate:
    input:
        fastq = expand(rules.mirge_symlink.output, sample=SAMPLES),
        db = lambda wildcards: join(EXT_DIR, 'mirge', MIRGE_ORG[wildcards.org], 'index.Libs', MIRGE_ORG[wildcards.org] + '_snorna.3.ebwt')
    params:
        lib = join(EXT_DIR, 'mirge'),
        org = lambda wildcards: MIRGE_ORG[wildcards.org],
        args = '-di -ai -gff ',
        tmp_out = join(INTERIM_DIR, 'mirge','{org}','{db}'),
        out = join(QUANT_PROCESSED, 'mirge','{org}','{db}')
    output:
        join(QUANT_PROCESSED, 'mirge','{org}','{db}', 'miR.Counts.csv')
    singularity:
        'docker://flatberg/mirge:2.0.6'
    conda:
        'envs/mirge.yaml'
    threads:
        8
    shell:
        'miRge2.0 annotate '
        '-s {input.fastq} '
        '-d {wildcards.db} '
        '-lib {params.lib} '
        '-sp {params.org} '
        '{params.args} '
        '-cpu {threads} '
        '-o {params.tmp_out} '
        '&& mv {params.tmp_out}/miRge*/* {params.out} '
        '&& rm -rf {params.tmp_out}/miRge* '


rule mirge_all:
    input:
        join(QUANT_PROCESSED, 'mirge', config['organism'], config['quant']['mirge']['db'], 'miR.Counts.csv')
    output:
        touch(join(QUANT_PROCESSED, 'mirge', config['organism'], config['quant']['mirge']['db'], '.done'))
        
